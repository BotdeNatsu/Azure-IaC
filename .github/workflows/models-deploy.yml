name: Deploy Models between Environments

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
    #branches: 
    #- main
  #pull_request:
    #branches:
    #- main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  export-and-deploy:
    runs-on:  ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    steps:

    # Deploy Custom Vision Model and publish
    - name: Deploy Calsification Model Vision
      uses: azure/powershell@v2
      with:
        inlineScript: |
          $variables_json = @"
          ${{ vars.FUNCTION_VARIABLES }}
          "@

          $variables = ConvertFrom-Json $variables_json

          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $TrainingKeySource = $variables.VISION_TRAINING_KEY_SOURCE
          $headers.Add("Training-key", $TrainingKeySource)
          
          $projectName = $variables.VISION_CLASSIFICATION_PROJECT_NAME
          $idProject = "0"
          
          $customVisionSourceURL = "https://"+$variables.VISION_SOURCE_NAME+".cognitiveservices.azure.com/"
          $endpoint_GetProjects = "customvision/v3.3/Training/projects"
          
          
          $URI_Request_GetProjects = $customVisionSourceURL+$endpoint_GetProjects
          
          #Get Project ID
          $response = (Invoke-RestMethod $URI_Request_GetProjects -Method 'GET' -Headers $headers)
          
          
          for ($i = 0; $i -lt $response.Length; $i++)
          {
              if ( $projectName -eq $response[$i].name )
              {
                  # do something
                  $idProject = $response[$i].id
                  break
              }
          }
          
          if ( $idProject -eq "0" )
              {
                  # do something
                  Write-Host "No existe un proyecto con el nombre $projectName"
                  
              }
          
          Write-Host $idProject
          
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Training-key", $TrainingKeySource)
          
          $endpoint_GetExport = "customvision/v3.3/Training/projects/$idProject/export?Training-key=$TrainingKeySource"
          
          $URI_Request_GetExport = $customVisionSourceURL+$endpoint_GetExport
          
          #Get Export Project Token
          $token = (Invoke-RestMethod $URI_Request_GetExport -Method 'GET').token
          
          Write-Host $token
          
          $TrainingKeySink = $variables.VISION_TRAINING_KEY
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Training-key", $TrainingKeySink)
          $headers.Add("Content-Length", 0)
          
          $projectNameSink = $variables.VISION_CLASSIFICATION_PROJECT_NAME
          
          $tokenReplaced = $token.Replace("&","%26")
          
          $customVisionSinkURL = "https://"+$variables.VISION_NAME+".cognitiveservices.azure.com/"
          $endpoint_ImportProject = "customvision/v3.3/Training/projects/import?token=$tokenReplaced&name=$projectNameSink"
          
          $URI_Request_ImportProject = $customVisionSinkURL+$endpoint_ImportProject
          
          $response = (Invoke-RestMethod $URI_Request_ImportProject -Method 'POST' -Headers $headers)
          
          Write-Host $response
          
        azPSVersion: "latest"

    - name: Deploy Object Detection Model Vision
      uses: azure/powershell@v2
      with:
        inlineScript: |
          $variables_json = @"
          ${{ vars.FUNCTION_VARIABLES }}
          "@

          $variables = ConvertFrom-Json $variables_json

          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $TrainingKeySource = $variables.VISION_TRAINING_KEY_SOURCE
          $headers.Add("Training-key", $TrainingKeySource)
          
          $projectName = $variables.VISION_DETECTION_PROJECT_NAME
          $idProject = "0"
          
          $customVisionSourceURL = "https://"+$variables.VISION_SOURCE_NAME+".cognitiveservices.azure.com/"
          $endpoint_GetProjects = "customvision/v3.3/Training/projects"
          
          
          $URI_Request_GetProjects = $customVisionSourceURL+$endpoint_GetProjects
          
          #Get Project ID
          $response = (Invoke-RestMethod $URI_Request_GetProjects -Method 'GET' -Headers $headers)
          
          
          for ($i = 0; $i -lt $response.Length; $i++)
          {
              if ( $projectName -eq $response[$i].name )
              {
                  # do something
                  $idProject = $response[$i].id
                  break
              }
          }
          
          if ( $idProject -eq "0" )
              {
                  # do something
                  Write-Host "No existe un proyecto con el nombre $projectName"
                  
              }
          
          Write-Host $idProject
          
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Training-key", $TrainingKeySource)
          
          $endpoint_GetExport = "customvision/v3.3/Training/projects/$idProject/export?Training-key=$TrainingKeySource"
          
          $URI_Request_GetExport = $customVisionSourceURL+$endpoint_GetExport
          
          #Get Export Project Token
          $token = (Invoke-RestMethod $URI_Request_GetExport -Method 'GET').token
          
          Write-Host $token
          
          $TrainingKeySink = $variables.VISION_TRAINING_KEY
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Training-key", $TrainingKeySink)
          $headers.Add("Content-Length", 0)
          
          $projectNameSink = $variables.VISION_DETECTION_PROJECT_NAME
          
          $tokenReplaced = $token.Replace("&","%26")
          
          $customVisionSinkURL = "https://"+$variables.VISION_NAME+".cognitiveservices.azure.com/"
          $endpoint_ImportProject = "customvision/v3.3/Training/projects/import?token=$tokenReplaced&name=$projectNameSink"
          
          $URI_Request_ImportProject = $customVisionSinkURL+$endpoint_ImportProject
          
          $response = (Invoke-RestMethod $URI_Request_ImportProject -Method 'POST' -Headers $headers)
          
          Write-Host $response
          
        azPSVersion: "latest"

          
    # Deploy Document Intelligence Model
    - name: Set Environment Variables
      uses: azure/powershell@v2
      with:
        inlineScript: |
          $variables_json = @"
          ${{ vars.FUNCTION_VARIABLES }}
          "@

          $variables = ConvertFrom-Json $variables_json

          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $documentIntelligenceTargetKey = $variables.DOCUMENT_INTELLIGENCE_KEY
          $headers.Add("Ocp-Apim-Subscription-Key", $documentIntelligenceTargetKey)
          
          
          $documentIntelligenceSourceURL = "https://${{ vars.locationRG }}.api.cognitive.microsoft.com/"
          $endpoint_AuthorizeCopy = "formrecognizer/documentModels:authorizeCopy?api-version=2023-07-31"
          
          
          $URI_Request_AuthorizeCopy = $documentIntelligenceSourceURL+$endpoint_AuthorizeCopy
          
          $documentIntelligenceModelName = $variables.DOCUMENT_INTELLIGENCE_MODEL_ID
          
          $documentIntelligenceTargetModelName = $variables.DOCUMENT_INTELLIGENCE_MODEL_ID
          
          $params = @{
          "modelId"=$documentIntelligenceTargetModelName
          "description"="Taggeo de VIN y Placa para todos los 102 documentos"
          } | ConvertTo-Json
          
          
          try {
              #Get Copy Auth
              $response = (Invoke-RestMethod $URI_Request_AuthorizeCopy -Method 'POST' -Headers $headers -Body $params -ContentType "application/json")
              Write-Host $response
              $status = "Succes"
          } catch {
              # Dig into the exception to get the Response details.
              # Note that value__ is not a typo.
              Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ 
              Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
              $status = "Conflict"
          
          }
          
          if ( $status -eq "Conflict" )
              {
          
                  Write-Host "Nombre del proyecto ocupado"
                  
              }
          
          #Copy 
          
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $documentIntelligenceSourceKey = $variables.DOCUMENT_INTELLIGENCE_KEY_SOURCE
          $headers.Add("Ocp-Apim-Subscription-Key", $documentIntelligenceSourceKey)
          
          
          $documentIntelligenceSourceURL = "https://${{ vars.locationRG }}.api.cognitive.microsoft.com/"
          $endpoint_CopyFirst = "formrecognizer/documentModels/"
          $endpoint_CopyLast = ":copyTo?api-version=2023-07-31"
          
          $params = $response | ConvertTo-Json
          
          $URI_Request_Copy = $documentIntelligenceSourceURL+$endpoint_CopyFirst+$documentIntelligenceModelName+$endpoint_CopyLast
          $response = (Invoke-RestMethod $URI_Request_Copy -Method 'POST' -Headers $headers -Body $params -ContentType "application/json")
          
        azPSVersion: "latest"
      